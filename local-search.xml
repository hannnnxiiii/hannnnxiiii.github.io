<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我是如何从0到1模仿出一个豆瓣电影的</title>
    <link href="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/"/>
    <url>/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li><p>本文非教学向。</p></li><li><p>本文主讲思路，辅以少许图片。如果你也准备或正在写一个豆瓣电影网，或许这篇文章会给你带来些许灵感。</p></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="第零步：寻找可用-API"><a href="#第零步：寻找可用-API" class="headerlink" title="第零步：寻找可用 API"></a>第零步：寻找可用 API</h2><p>有可用 API 才有模仿建站的信心与前提，本文介绍两种寻找 API 的方式</p><ul><li><p>通过控制台-网络-Fetch&#x2F;XHR 中的可见请求获取 API</p><ol><li><p>打开对应网页。F12 打开控制台，依次点击网络-&gt;Fetch&#x2F;XHR，刷新网站，从出现的请求中寻找有用的请求。右键-&gt;复制-&gt;以 cURL(cmd)格式复制。</p></li><li><p>打开 apifox(或任何你喜欢的 cURL 命令转代码网站)，点击新建项目，随便起个名字，其余默认。进入项目界面后，悬停左上方紫底白字加号-&gt;导入 cURL-&gt;粘贴你刚刚复制的 cURL-&gt;确定，即可查看对应的 axios 方法、URL 和各类参数。点击发送即可查看响应的数据结构。</p></li></ol></li><li><p>善用搜索引擎，站在巨人的肩膀上</p></li></ul><h2 id="第一步：观察网站，选择合适的技术栈"><a href="#第一步：观察网站，选择合适的技术栈" class="headerlink" title="第一步：观察网站，选择合适的技术栈"></a>第一步：观察网站，选择合适的技术栈</h2><p>先思考再动手，选对技术栈事半功倍。豆瓣电影是普通的资讯类网站，vue3+vite+pinia+router+axios+element-plus+VueUse 就足够完成整个项目了。我另外加了 tailwindCSS 提高效率(还没用过的建议随便敲两行代码试试，丑在效率面前一文不值，更何况相比起内联样式已经算是雅观了)，typescript 加强对代码的检查，在运行前就能找到可能的错误。</p><p>另外记得用 git 管理项目，步子迈太大扯着蛋又不知道怎么改的时候可以回退版本，理清思路再写。</p><h2 id="第二步：起项目，配路由"><a href="#第二步：起项目，配路由" class="headerlink" title="第二步：起项目，配路由"></a>第二步：起项目，配路由</h2><ul><li><p>新建一个 vue3 项目，安装你喜欢的技术栈，所有过程官网都写得很清楚了，这里就不再赘述</p></li><li><p>关于配路由，头部和页脚在两个页面都有出现，设在一级路由的首页中。中间内容部分配置二级路由出口，来呈现首页列表和详情页。</p></li></ul><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image1.jpg" class=""><h1 id="页面实现"><a href="#页面实现" class="headerlink" title="页面实现"></a>页面实现</h1><h2 id="使用最多的方法"><a href="#使用最多的方法" class="headerlink" title="使用最多的方法"></a>使用最多的方法</h2><p>豆瓣电影的页面布局清晰简单，有棱有角。大多数时候只需要使用 flex 布局来写静态结构，用 axios 拿到数据后渲染进去就好，下文更多聚焦于写页面过程中遇到的问题，不再赘述上述内容了。</p><h2 id="第三步：实现一级路由中的首页"><a href="#第三步：实现一级路由中的首页" class="headerlink" title="第三步：实现一级路由中的首页"></a>第三步：实现一级路由中的首页</h2><p>照着官网把头部和页脚静态结构画好，因为只写了首页和详情页两个页面所以我没有给它加动态操作.</p><h2 id="第四步：实现二级路由中的首页列表"><a href="#第四步：实现二级路由中的首页列表" class="headerlink" title="第四步：实现二级路由中的首页列表"></a>第四步：实现二级路由中的首页列表</h2><h3 id="我是如何实现走马灯的"><a href="#我是如何实现走马灯的" class="headerlink" title="我是如何实现走马灯的"></a>我是如何实现走马灯的</h3><h4 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h4><ul><li><p>父元素使用<code>overflow:hidden</code>来隐藏溢出的子元素</p></li><li><p>子元素使用<code>width:max-content</code>强制不换行，同时保证每个电影盒子不被挤压空间</p></li><li><p>下一页的动作就是用<code>translate</code>进行位移，<code>transition</code>实现过渡效果。每次点击按钮调用函数，增减 translate 的值。</p></li><li><p>实际上就是一个长条在页面移动，但只让用户看到我们想让他们看到的</p></li></ul><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image2.jpg" class=""><h4 id="使用组件库"><a href="#使用组件库" class="headerlink" title="使用组件库"></a>使用组件库</h4><p>实际上，走马灯、按钮、分页和悬浮框，这些在首页要用到的东西在 Element Plus 中都已经提供。我在下面的最近热门电影等板块都使用了它提供的走马灯和悬浮框，节省了不少时间。</p><h3 id="组件库烦人的样式"><a href="#组件库烦人的样式" class="headerlink" title="组件库烦人的样式"></a>组件库烦人的样式</h3><p>上文提到使用组件库给我节省了不少时间，但修改组件库组件的样式却花费了我不少时间。</p><p>以<code>el-pagination</code>举例，你想把它的按钮变成可爱的圆形，于是你直接给他上了个画圆套餐，ctrl+s 保存回到页面一看，what?为什么它变成了一个椭圆？</p><p>冷静的你非常冷静^^，经过一番查看你发现它有一个<code>padding:0 4px</code>来自<code>.el-pagination button</code>，于是你仿写它想把<code>padding</code>改成 0，不出意外地出意外了，它的样式纹丝不动。你也可以试一试给<code>el-pagination</code>加个<code>id=&quot;Pagi&quot;</code>然后使用<code>#Pagi button</code>，编辑器明确告诉你它的明确性是(1,0,1)，胜过了原来的(0,1,1)。当然了，这样做依旧会失败。</p><p>解决办法：<code>.el-pagination :deep(button)</code>，用这个神秘选择器就能解决这个问题。别问我为什么，我不知道，等我知道了我就来更新博客。</p><h3 id="一波未平一波又起：跨域"><a href="#一波未平一波又起：跨域" class="headerlink" title="一波未平一波又起：跨域"></a>一波未平一波又起：跨域</h3><p>终于写好了静态页面，你发送请求准备渲染数据，发现原本 apifox 上能成功使用的 api，到你手里不是 404 not found 就是 200 ok 但没有返回有效数据。现在我提供一段神秘代码可能可以解决这个问题。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//vite.config.ts</span><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-comment">// 添加 server 配置来处理跨域问题</span><br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-comment">// 配置代理，使用 /api 作为前缀</span><br>      <span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://api.douban.com&quot;</span>, <span class="hljs-comment">// 目标 API 地址</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 允许跨域</span><br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Rewriting API1 path:&quot;</span>, path)<br>          <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        &#125;, <span class="hljs-comment">// 将 /api 替换为空</span><br>      &#125;,<br>      <span class="hljs-string">&quot;/douban&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://movie.douban.com&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Rewriting API2 path:&quot;</span>, path)<br>          <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/douban/</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>创建 axios 实例的时候把基地址换成上面的这个属性名就好，但我还是不知道为什么。等我明白了我一定来更新博客。</p><h2 id="第五步：实现二级路由中的详情页"><a href="#第五步：实现二级路由中的详情页" class="headerlink" title="第五步：实现二级路由中的详情页"></a>第五步：实现二级路由中的详情页</h2><p>写页面，爽！豆瓣电影的详情页是无穷无尽的信息，疯狂的 flex 布局加数据渲染完成了绝大多数内容。</p><h3 id="耗时良久的固定点赞区"><a href="#耗时良久的固定点赞区" class="headerlink" title="耗时良久的固定点赞区"></a>耗时良久的固定点赞区</h3><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image3.jpg" class=""><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image4.jpg" class=""><p>这个固定点赞区的效果该怎么实现呢？</p><p>我最后选择了 VueUse 中的<code>useElementBounding</code>,<code>useWindowSize</code>,<code>useWindowScroll</code>来实现</p><ol><li><p>点击展开时，拿到这个 DOM 元素，用<code>useElementBounding</code>拿到 DOM 元素的宽高和到视口边界的参数。再用<code>useWindowSize</code>拿到视口的高度。</p></li><li><p>开始侦听它的 top，回调函数里面去判断 DOM 元素在视口中的位置，根据情况来决定给点赞区加<code>position:fixed</code>还是<code>position:static</code></p></li><li><p>点击收起，让 DOM 元素重新回到文档流，并把视口调到该评论的位置，防止用户找不着北。</p></li></ol><p>代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; useElementBounding &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span><br><span class="hljs-keyword">import</span> &#123; useWindowSize &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span><br><span class="hljs-keyword">import</span> &#123; useWindowScroll &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span><br><br><span class="hljs-keyword">const</span> &#123; y &#125; = <span class="hljs-title function_">useWindowScroll</span>()<br><span class="hljs-keyword">const</span> &#123; height &#125; = <span class="hljs-title function_">useWindowSize</span>()<br><span class="hljs-keyword">const</span> unwatchList = ref&lt;<span class="hljs-title class_">Array</span>&lt;<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>&gt;&gt;([])<br><span class="hljs-comment">// 点击展开，获取完整评价</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getFullReview</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"><span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt; &#123;<br>  <span class="hljs-comment">/* ... */</span><br>  <span class="hljs-comment">// filmReview 影评DOM元素</span><br>  <span class="hljs-keyword">const</span> &#123; top, bottom, left &#125; = <span class="hljs-title function_">useElementBounding</span>(filmReview.<span class="hljs-property">value</span>![index])<br>  <span class="hljs-keyword">const</span> unwatch = <span class="hljs-title function_">watch</span>(<br>    <span class="hljs-function">() =&gt;</span> top.<span class="hljs-property">value</span>,<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (bottom.<span class="hljs-property">value</span> &gt;= height.<span class="hljs-property">value</span> &amp;&amp; top.<span class="hljs-property">value</span> &lt;= height.<span class="hljs-property">value</span> - <span class="hljs-number">60</span>) &#123;<br>        <span class="hljs-comment">// interactiveZone 点赞区DOM元素</span><br>        interactiveZone.<span class="hljs-property">value</span>![index].<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;fixed&quot;</span><br>        interactiveZone.<span class="hljs-property">value</span>![index].<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;height.value - <span class="hljs-number">81</span>&#125;</span>px`</span><br>        interactiveZone.<span class="hljs-property">value</span>![index].<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;left.value&#125;</span>px`</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        interactiveZone.<span class="hljs-property">value</span>![index].<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;static&quot;</span><br>      &#125;<br>    &#125;,<br>    &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;<br>  )<br>  unwatchList.<span class="hljs-property">value</span>[index] = unwatch<br>&#125;<br><span class="hljs-comment">// 收起完整评价</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">retractReview</span> = (<span class="hljs-params"><span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; top &#125; = <span class="hljs-title function_">useElementBounding</span>(filmReview.<span class="hljs-property">value</span>![index])<br>  y.<span class="hljs-property">value</span> = y.<span class="hljs-property">value</span> + top.<span class="hljs-property">value</span> - <span class="hljs-number">100</span><br>  interactiveZone.<span class="hljs-property">value</span>![index].<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;static&quot;</span><br>  unwatchList.<span class="hljs-property">value</span>[index]()<br>  unwatchList.<span class="hljs-property">value</span>[index] = <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>  <span class="hljs-comment">/* ... */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码又臭又长，逻辑混乱。但不管怎么说它成功实现了我想要的功能。待笔者修为长进，再回来重写它。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/09/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/09/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>测试 1</p><!-- ![](/images/testPic1.jpg) --><img src="/2024/09/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/testPic1.jpg" class=""><img src="/2024/09/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/testPic1.jpg" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/04/hello-world/"/>
    <url>/2024/09/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
