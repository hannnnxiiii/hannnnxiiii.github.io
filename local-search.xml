<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我是如何从0到1模仿出一个豆瓣电影的</title>
    <link href="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/"/>
    <url>/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li><p>本文非教学向。</p></li><li><p>本文主讲思路，辅以少许图片。如果你也准备或正在写一个豆瓣电影网，或许这篇文章会给你带来些许灵感。</p></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="第零步：寻找可用-API"><a href="#第零步：寻找可用-API" class="headerlink" title="第零步：寻找可用 API"></a>第零步：寻找可用 API</h2><p>有可用 API 才有模仿建站的信心与前提，本文介绍两种寻找 API 的方式</p><ul><li><p>通过控制台-网络-Fetch&#x2F;XHR 中的可见请求获取 API</p><ol><li><p>打开对应网页。F12 打开控制台，依次点击网络-&gt;Fetch&#x2F;XHR，刷新网站，从出现的请求中寻找有用的请求。右键-&gt;复制-&gt;以 cURL(cmd)格式复制。</p></li><li><p>打开 apifox(或任何你喜欢的 cURL 命令转代码网站)，点击新建项目，随便起个名字，其余默认。进入项目界面后，悬停左上方紫底白字加号-&gt;导入 cURL-&gt;粘贴你刚刚复制的 cURL-&gt;确定，即可查看对应的 axios 方法、URL 和各类参数。点击发送即可查看响应的数据结构。</p></li></ol></li><li><p>善用搜索引擎，站在巨人的肩膀上</p></li></ul><h2 id="第一步：观察网站，选择合适的技术栈"><a href="#第一步：观察网站，选择合适的技术栈" class="headerlink" title="第一步：观察网站，选择合适的技术栈"></a>第一步：观察网站，选择合适的技术栈</h2><p>先思考再动手，选对技术栈事半功倍。豆瓣电影是普通的资讯类网站，vue3+vite+pinia+router+axios+element-plus+VueUse 就足够完成整个项目了。我另外加了 tailwindCSS 提高效率(还没用过的建议随便敲两行代码试试，丑在效率面前一文不值，更何况相比起内联样式已经算是雅观了)，typescript 加强对代码的检查，在运行前就能找到可能的错误。</p><p>另外记得用 git 管理项目，步子迈太大扯着蛋又不知道怎么改的时候可以回退版本，理清思路再写。</p><h2 id="第二步：起项目，配路由"><a href="#第二步：起项目，配路由" class="headerlink" title="第二步：起项目，配路由"></a>第二步：起项目，配路由</h2><ul><li><p>新建一个 vue3 项目，安装你喜欢的技术栈，所有过程官网都写得很清楚了，这里就不再赘述</p></li><li><p>关于配路由，头部和页脚在两个页面都有出现，设在一级路由的首页中。中间内容部分配置二级路由出口，来呈现首页列表和详情页。</p></li></ul><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image1.jpg" class=""><center>图 1</center><h1 id="页面实现"><a href="#页面实现" class="headerlink" title="页面实现"></a>页面实现</h1><h2 id="使用最多的方法"><a href="#使用最多的方法" class="headerlink" title="使用最多的方法"></a>使用最多的方法</h2><p>豆瓣电影的页面布局清晰简单，有棱有角。大多数时候只需要使用 flex 布局来写静态结构，用 axios 拿到数据后渲染进去就好，下文更多聚焦于写页面过程中遇到的问题，不再赘述上述内容了。</p><h2 id="第三步：实现一级路由中的首页"><a href="#第三步：实现一级路由中的首页" class="headerlink" title="第三步：实现一级路由中的首页"></a>第三步：实现一级路由中的首页</h2><p>照着官网把头部和页脚静态结构画好，因为只写了首页和详情页两个页面所以我没有给它加动态操作.</p><h2 id="第四步：实现二级路由中的首页列表"><a href="#第四步：实现二级路由中的首页列表" class="headerlink" title="第四步：实现二级路由中的首页列表"></a>第四步：实现二级路由中的首页列表</h2><h3 id="我是如何实现走马灯的"><a href="#我是如何实现走马灯的" class="headerlink" title="我是如何实现走马灯的"></a>我是如何实现走马灯的</h3><h4 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h4><ul><li><p>父元素使用<code>overflow:hidden</code>来隐藏溢出的子元素</p></li><li><p>子元素使用<code>width:max-content</code>强制不换行，同时保证每个电影盒子不被挤压空间</p></li><li><p>下一页的动作就是用<code>translate</code>进行位移，<code>transition</code>实现过渡效果。每次点击按钮调用函数，增减 translate 的值。</p></li><li><p>实际上就是一个长条在页面移动，但只让用户看到我们想让他们看到的</p></li></ul><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image2.jpg" class=""><center>图 2</center><h4 id="使用组件库"><a href="#使用组件库" class="headerlink" title="使用组件库"></a>使用组件库</h4><p>实际上，走马灯、按钮、分页和悬浮框，这些在首页要用到的东西在 Element Plus 中都已经提供。我在下面的最近热门电影等板块都使用了它提供的走马灯和悬浮框，节省了不少时间。</p><h3 id="为什么对组件修改样式不生效？"><a href="#为什么对组件修改样式不生效？" class="headerlink" title="为什么对组件修改样式不生效？"></a>为什么对组件修改样式不生效？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    我是父组件<br>    &lt;el-pagination layout=&quot;prev, next&quot; :total=&quot;50&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br>.father &#123;<br>  width: 500px;<br>  height: 200px;<br>  background-color: rgb(103, 206, 103);<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image5.jpg" class=""><center>图 3</center><p>上面是一个简单的演示 demo，父容器包裹了一个 el-pagination，此时我想给分页按钮上一个天蓝色，观察到控制台中显示如下</p><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image6.jpg" class=""><center>图 4</center><p>于是我往 style 中添加代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-pagination</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到按钮背景色并没有被改变。原因是当你给 style 添加上 scoped 后，vue 会给该组件中的元素(当前 vue 文件中存在的元素，而非真实 DOM 元素)添加唯一的自定义属性，上图中你可以看到它们都被加上了<code>data-v-7a7a37b1</code>，同时你写的样式会被渲染如下：</p><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image7.jpg" class=""><center>图 5</center><p>而 el-pagination 是引入的组件，只有根元素会被加上自定义属性，button 是没有这个属性的，这一点可以从图 4 中真实 DOM 元素中看到。所以之前的选择器当然就没有选中我想要的分页按钮了。</p><p>解决方法就是使用:deep()深度选择器，它能穿透当前组件修改其他组件内子元素的样式，例如将上面的 css 代码改成如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-pagination</span> :<span class="hljs-built_in">deep</span>(button) &#123;<br>  <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><p>它将渲染如下：</p><img src="/2024/09/11/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%A8%A1%E4%BB%BF%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/image8.jpg" class=""><center>图 6</center><p>此时就能成功选中了。</p><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>协议、域名、端口只要有一个不一致的时候就会触发跨域，浏览器会阻止你接收请求回来的数据。这对安全来说是很有必要的，但在开发环境中却有些碍事。我们可以通过开启代理的方式来解决这个问题。让代理服务器把我们的请求地址包装成同源地址，骗过浏览器，从而正常与服务器通信。</p><p>注意：这种方法只在开发环境中有效，项目正式上线需要和服务器端配合，使用 JSONP、WebSocket 或者 CORS</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//vite.config.ts</span><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-comment">// 添加 server 配置来处理跨域问题</span><br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-comment">// 配置代理，使用 /api 作为前缀</span><br>      <span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://api.douban.com&quot;</span>, <span class="hljs-comment">// 目标 API 地址</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 允许跨域</span><br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Rewriting API1 path:&quot;</span>, path)<br>          <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        &#125;, <span class="hljs-comment">// 将 /api 替换为空</span><br>      &#125;,<br>      <span class="hljs-string">&quot;/douban&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://movie.douban.com&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Rewriting API2 path:&quot;</span>, path)<br>          <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/douban/</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>接着在创建 axios 实例的时候，把原先的基地址换成上述代码中 proxy 中对应的键即可。</p><h2 id="第五步：实现二级路由中的详情页"><a href="#第五步：实现二级路由中的详情页" class="headerlink" title="第五步：实现二级路由中的详情页"></a>第五步：实现二级路由中的详情页</h2><p>没什么太大的难点，照着画完把请求回来的数据渲染进去就好。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
